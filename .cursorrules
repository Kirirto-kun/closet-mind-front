# Техническое задание (ТЗ) для Backend API

Это документ описывает все эндпоинты, доступные в бэкенде, их параметры и структуры данных.

## Аутентификация

Большинство эндпоинтов требуют аутентификации. Для этого необходимо получить `access_token` через эндпоинт `POST /auth/token` или `POST /auth/google-login` и передавать его в заголовке `Authorization` каждого запроса в формате `Bearer <token>`.

---

## Auth

Эндпоинты для регистрации и аутентификации пользователей.

### 1. Регистрация нового пользователя
- **Эндпоинт:** `POST /auth/register`
- **Описание:** Создает нового пользователя в системе.
- **Аутентификация:** Не требуется.
- **Тело запроса (`application/json`):**
  - `email` (string, format: email): Email пользователя.
  - `username` (string): Имя пользователя.
  - `password` (string): Пароль.
- **Тело ответа (200 OK):** `UserResponse` - объект с данными пользователя.
  - `id` (integer)
  - `email` (string)
  - `username` (string)
  - `is_active` (boolean)
  - `created_at` (string, format: date-time)
  - `updated_at` (string, format: date-time | null)

### 2. Вход в систему (получение токена)
- **Эндпоинт:** `POST /auth/token`
- **Описание:** Аутентифицирует пользователя по email и паролю и возвращает токен доступа.
- **Аутентификация:** Не требуется.
- **Тело запроса (`application/x-www-form-urlencoded`):**
  - `username` (string): Email пользователя.
  - `password` (string): Пароль.
- **Тело ответа (200 OK):** `Token` - объект с токеном доступа.
  - `access_token` (string)
  - `token_type` (string): "bearer"

### 3. Вход через Google
- **Эндпоинт:** `POST /auth/google-login`
- **Описание:** Аутентифицирует или регистрирует пользователя с помощью Google ID Token.
- **Аутентификация:** Не требуется.
- **Тело запроса (`application/json`):**
  - `id_token` (string): Google ID Token, полученный на фронтенде.
- **Тело ответа (200 OK):** `Token` - объект с токеном доступа.
  - `access_token` (string)
  - `token_type` (string): "bearer"

---

## Agent

Эндпоинт для взаимодействия с AI-агентом.

### 1. Отправка сообщения агенту
- **Эндпоинт:** `POST /chat`
- **Описание:** Обрабатывает запрос пользователя через систему агентов. Создает временную сессию чата.
- **Аутентификация:** Требуется.
- **Тело запроса (`application/json`):**
  - `message` (string): Сообщение от пользователя.
- **Тело ответа (200 OK):**
  - `response` (any): Ответ от AI-агента.

---

## Wardrobe (Гардероб)

Эндпоинты для управления предметами одежды в гардеробе пользователя.

### 1. Получить все предметы одежды
- **Эндпоинт:** `GET /wardrobe/items`
- **Описание:** Возвращает список всех предметов одежды для текущего пользователя.
- **Аутентификация:** Требуется.
- **Тело ответа (200 OK):** `List[ClothingItemResponse]` - массив объектов с данными об одежде.
  - `id` (integer)
  - `user_id` (integer)
  - `name` (string)
  - `image_url` (string)
  - `category` (string)
  - `features` (List[string])

### 2. Добавить новые предметы одежды
- **Эндпоинт:** `POST /wardrobe/items`
- **Описание:** Загружает фотографии одежды, анализирует их и сохраняет как новые предметы в гардеробе.
- **Аутентификация:** Требуется.
- **Тело запроса (`application/json`):** `List[PhotoUpload]` - массив объектов с изображениями.
  - `image_base64` (string): Изображение в формате Base64.
- **Тело ответа (200 OK):** `List[ClothingItemResponse]` - массив созданных объектов одежды.

---

## Waitlist (Список ожидания)

Эндпоинты для управления элементами в списке ожидания.

### 1. Получить список ожидания
- **Эндпоинт:** `GET /waitlist/items`
- **Описание:** Возвращает все элементы из списка ожидания пользователя.
- **Аутентификация:** Требуется.
- **Тело ответа (200 OK):** `List[WaitListItemResponse]` - массив элементов списка ожидания.
  - `id` (integer)
  - `user_id` (integer)
  - `image_url` (string)
  - `status` (string, default: "pending")
  - `try_on_url` (string | null)
  - `created_at` (string, format: date-time)

### 2. Добавить элемент по URL
- **Эндпоинт:** `POST /waitlist/items`
- **Описание:** Добавляет новый элемент в список ожидания по URL изображения.
- **Аутентификация:** Требуется.
- **Тело запроса (`application/json`):**
  - `image_url` (string): Прямая ссылка на изображение.
  - `status` (string, optional, default: "pending")
  - `try_on_url` (string, optional)
- **Тело ответа (200 OK):** `WaitListItemResponse` - созданный элемент.

### 3. Загрузить скриншот
- **Эндпоинт:** `POST /waitlist/upload-screenshot`
- **Описание:** Загружает скриншот из расширения браузера и добавляет как новый элемент.
- **Аутентификация:** Требуется.
- **Тело запроса (`application/json`):**
  - `image_base64` (string): Изображение в формате Base64.
- **Тело ответа (200 OK):** `WaitListItemResponse` - созданный элемент.

### 4. Виртуальная примерка
- **Эндпоинт:** `POST /waitlist/try-on/{item_id}`
- **Описание:** Запускает виртуальную примерку для элемента из списка ожидания с фотографией пользователя.
- **Аутентификация:** Требуется.
- **Параметры пути:**
  - `item_id` (integer): ID элемента в списке ожидания.
- **Тело запроса (`application/json`):**
  - `image_base64` (string): Фотография пользователя в формате Base64.
- **Тело ответа (200 OK):** `WaitListItemResponse` - обновленный элемент с `try_on_url`.

### 5. Скачать расширение для браузера
- **Эндпоинт:** `GET /waitlist/download-extension`
- **Описание:** Возвращает ZIP-архив с расширением для браузера.
- **Аутентификация:** Не требуется.
- **Тело ответа (200 OK):** Файл `closetmind_extension.zip`.

---

## Chats (Чаты)

Эндпоинты для управления постоянными чатами с AI-агентом.

### 1. Создать новый чат
- **Эндпоинт:** `POST /chats`
- **Описание:** Создает новую сессию чата.
- **Аутентификация:** Требуется.
- **Тело запроса (`application/json`):**
  - `title` (string): Название чата.
- **Тело ответа (200 OK):** `ChatResponse` - созданный чат.
  - `id` (integer)
  - `user_id` (integer)
  - `title` (string)
  - `created_at` (string, format: date-time)
  - `updated_at` (string, format: date-time | null)

### 2. Получить все чаты пользователя
- **Эндпоинт:** `GET /chats`
- **Описание:** Возвращает список всех чатов текущего пользователя.
- **Аутентификация:** Требуется.
- **Тело ответа (200 OK):** `List[ChatResponse]` - массив чатов.

### 3. Получить чат с сообщениями
- **Эндпоинт:** `GET /chats/{chat_id}`
- **Описание:** Возвращает один чат со всеми его сообщениями.
- **Аутентификация:** Требуется.
- **Параметры пути:**
  - `chat_id` (integer): ID чата.
- **Тело ответа (200 OK):** `ChatWithMessages` - объект чата с массивом сообщений.
  - `messages` (List[MessageResponse])

### 4. Отправить сообщение в чат
- **Эндпоинт:** `POST /chats/{chat_id}/messages`
- **Описание:** Отправляет сообщение в указанный чат и получает ответ от AI.
- **Аутентификация:** Требуется.
- **Параметры пути:**
  - `chat_id` (integer): ID чата.
- **Тело запроса (`application/json`):**
  - `message` (string): Текст сообщения.
- **Тело ответа (200 OK):** `MessageResponse` - ответное сообщение от AI.
  - `id` (integer)
  - `chat_id` (integer)
  - `role` (string): "assistant"
  - `content` (string)
  - `created_at` (string, format: date-time)

### 5. Получить все сообщения чата
- **Эндпоинт:** `GET /chats/{chat_id}/messages`
- **Описание:** Возвращает все сообщения из указанного чата.
- **Аутентификация:** Требуется.
- **Параметры пути:**
  - `chat_id` (integer): ID чата.
- **Тело ответа (200 OK):** `List[MessageResponse]` - массив сообщений.

### 6. Удалить чат
- **Эндпоинт:** `DELETE /chats/{chat_id}`
- **Описание:** Удаляет чат и все связанные с ним сообщения.
- **Аутентификация:** Требуется.
- **Параметры пути:**
  - `chat_id` (integer): ID чата.
- **Тело ответа (200 OK):**
  - `message` (string): "Chat deleted successfully"

---

## Try-On (Виртуальная примерка)

Эндпоинты для выполнения виртуальной примерки.

### 1. Создать новую примерку
- **Эндпоинт:** `POST /tryon`
- **Описание:** Выполняет виртуальную примерку, совмещая изображение одежды и изображение человека.
- **Аутентификация:** Требуется.
- **Тело запроса (`multipart/form-data`):**
  - `clothing_image` (file): Файл с изображением одежды.
  - `human_image` (file): Файл с изображением человека.
- **Тело ответа (200 OK):** `TryOnResponse` - объект с результатами примерки.
  - `id` (integer)
  - `user_id` (integer)
  - `clothing_image_url` (string)
  - `human_image_url` (string)
  - `result_url` (string)
  - `created_at` (string, format: date-time)

### 2. Получить историю примерок
- **Эндпоинт:** `GET /tryon`
- **Описание:** Возвращает историю всех виртуальных примерок пользователя.
- **Аутентификация:** Требуется.
- **Тело ответа (200 OK):** `List[TryOnResponse]` - массив с результатами примерок. 